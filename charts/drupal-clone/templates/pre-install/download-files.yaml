{{- $preinstallName := include "drupal-clone.fullname" . -}}
apiVersion: batch/v1
kind: Job
metadata:
  name: {{ $preinstallName  }}-preinstall
  annotations:
    "helm.sh/hook": pre-install
    "helm.sh/hook-weight": "-100"
    "helm.sh/hook-delete-policy": before-hook-creation, hook-succeeded
  labels:
    {{- include "drupal-clone.metaLabels" . | nindent 4 }}
spec:
  template:
    metadata:
      name: {{ $preinstallName }}-preinstall
    spec:
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      containers:
        - image: "{{ .Values.jobs.preInstall.image.repository }}:{{ .Values.jobs.preInstall.image.tag }}"
          name: {{ $preinstallName }}-preinstall
          command: ["/bin/bash"]
          args:
            - -c
            - >-
          {{- if eq .Values.codeProvider.name "git" }} 
              mc alias set s3_bucket ${S3_URL} ${S3_USER} ${S3_PASS} &&
              git config --global http.sslVerify false && 
              git clone -b ${PROJECT_BRANCH} https://${PROJECT_USER}:${PROJECT_PASSWORD}@${PROJECT_PATH} &&
              cd ${PROJECT_NAME} &&
          {{- if .Values.codeProvider.commitHash }}
              git reset --hard ${COMMIT_HASH} &&
          {{- end }}
              rm -rf .git &&
              mv * ../www && cd .. && cd www/ &&
              mc cp s3_bucket/${ASSETS_ROUTE}/${ASSETS_FILENAME} . &&
              mv config web/sites/
          {{- end }}
          {{- if eq .Values.codeProvider.name "s3" }}
              cd www/ &&
              mc alias set s3_bucket ${S3_URL} ${S3_USER} ${S3_PASS} &&
              mc cp s3_bucket/${ASSETS_ROUTE}/${ASSETS_FILENAME} . &&
              mc cp s3_bucket/${CUSTOMSITE_ROUTE}/${CUSTOMSITE_FILENAME} .
          {{- end }}
          imagePullPolicy: {{ .Values.jobs.preInstall.pullPolicy }}
          volumeMounts:
            - mountPath: /www
              name: drupal-storage
              readOnly: false
          env:
            - name: S3_URL
              value: {{ .Values.codeProvider.s3Bucket }}
            - name: S3_USER
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.codeProvider.s3BucketSecretName}}
                  key: username
            - name: S3_PASS
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.codeProvider.s3BucketSecretName }}
                  key: password
            - name: ASSETS_ROUTE
              value: {{ .Values.codeProvider.assetsRoute }}
            - name: ASSETS_FILENAME
              value: {{ .Values.codeProvider.assetsFileName }}
            {{- if eq .Values.codeProvider.name "s3" }}
            - name: CUSTOMSITE_ROUTE
              value: {{ .Values.codeProvider.customSiteRoute }} 
            - name: CUSTOMSITE_FILENAME
              value: {{ .Values.codeProvider.customSiteFileName }}
            {{- end }} 
            {{- if eq .Values.codeProvider.name "git"  }}
            - name: PROJECT_NAME
              value: {{ .Values.codeProvider.gitRepoName }}
            - name: PROJECT_USER
              valueFrom:
                secretKeyRef:
                  name:  {{ .Values.codeProvider.gitSecretName }}
                  key: username
            - name: PROJECT_PASSWORD
              valueFrom:
                secretKeyRef:
                  name:  {{ .Values.codeProvider.gitSecretName }}
                  key: password
            - name: PROJECT_PATH
              value: {{ .Values.codeProvider.gitRepo }}
            - name: PROJECT_BRANCH
              value: {{ .Values.codeProvider.gitBranch }}
            {{- if .Values.codeProvider.commitHash }}
            - name: COMMIT_HASH
              value: {{ .Values.codeProvider.commitHash }}
            {{- end }}
            {{- end }}
      restartPolicy: Never
      volumes:
        - name: drupal-storage
          persistentVolumeClaim:
            claimName: {{ .Values.persistenceClaim.existingClaim | default (printf "%s" (include "drupal-clone.fullname" .)) }}      
